{"version":3,"sources":["components/FormFieldLabel.js","components/TimeInput.js","components/LoginForm.js","components/AccountList.js","components/SearchDropdown.js","components/Spinner.js"],"names":["FormFieldLabel","props","required","label","rest","direction","color","TimeInput","error","MaskedInput","mask","length","regexp","placeholder","fixed","options","LoginForm","email","setEmail","password","setPassword","action","demo","inputRef","useRef","timerId","useEffect","mounted","i","string","current","setInterval","slice","click","clearInterval","Form","align","onSubmit","e","preventDefault","variables","FormField","info","TextInput","icon","Mail","value","onChange","target","type","Box","style","height","Text","fontStyle","fontFamily","size","Button","ref","alignSelf","primary","DELETE_API_KEY","Mutations","SELECT_KEY","FETCH_ACCOUNT","Queries","FETCH_USER","AccountCard","apikey","id","userId","selectedKey","useState","hover","sethover","useMutation","onError","err","message","split","console","log","update","cache","deleteAPIkey","data","readQuery","query","writeQuery","user","apikeys","deleteAPI","selectKey","useQuery","loading","fontWeight","account","focusIndicator","key","justify","border","background","light","dark","as","cursor","onClick","pad","level","truncate","onMouseEnter","onMouseLeave","AccountList","columns","count","margin","gap","map","width","SearchInputContext","createContext","sortLocations","selectedLocationName","p1","p2","p1Exists","includes","p2Exists","City","toLowerCase","SearchDropdown","venues","setFieldValue","values","test","sort","locations","setLocations","searching","setSearching","searchQuery","setSearchQuery","selectRef","filterLocations","filter","s","indexOf","setTimeout","clearTimeout","renderOption","flex","tabIndex","checked","some","partner","Provider","closeOnChange","searchPlaceholder","emptySearchMessage","multiple","replace","valueKey","labelKey","left","vertical","round","horizontal","minWidth","join","href","onFocus","event","stopPropagation","focus","option","newSelectedLocation","seasonIndex","splice","push","selectedLocation","sortedLocation","handleChange","onSearch","spinning","version","viewBox","fill","opacity","d","attributeName","from","to","dur","repeatCount","Spinner"],"mappings":"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","file":"static/js/1.b2e9e83e.chunk.js","sourcesContent":["import React from \"react\";\nimport { FormField, Box, Text } from \"grommet\";\n\n\n// Modification of Grommet Formfield label to clearly show when data \n// Is required\nexport const FormFieldLabel = props => {\n  const { required, label, ...rest } = props;\n  return (\n    <FormField\n      label={\n        required ? (\n          <Box direction=\"row\">\n            <Text>{label}</Text>\n            <Text color=\"status-critical\">*</Text>\n          </Box>\n        ) : (\n          label\n        )\n      }\n      required={required}\n      {...rest}\n    ></FormField>\n  );\n};\n","import React from \"react\";\nimport { MaskedInput } from \"grommet\";\nimport { FormFieldLabel } from \"./FormFieldLabel\";\n\n// Input component for Time\nexport const TimeInput = (props) => {\n  let { label, required, error, ...rest } = props;\n  return (\n    <FormFieldLabel error={error} label={label} required={required}>\n      <MaskedInput\n        mask={[\n          {\n            length: [1, 2],\n            regexp: /^1[0,1-2]$|^0?[1-9]$|^0$/,\n            placeholder: \"Hour\",\n          },\n          { fixed: \":\" },\n          {\n            length: 2,\n            options: [\"00\", \"15\", \"30\", \"45\"],\n            regexp: /^[0-5][0-9]$|^[0-9]$/,\n            placeholder: \"Min\",\n          },\n          { fixed: \" \" },\n          {\n            length: 2,\n            options: [\"AM\", \"PM\"],\n            regexp: /^[ap]m$|^[AP]M$|^[aApP]$/,\n            placeholder: \"AM/PM\",\n          },\n        ]}\n        {...rest}\n      />\n    </FormFieldLabel>\n  );\n};\n","import React, { useRef, useEffect } from \"react\";\nimport { Box, Form, FormField, TextInput, Button, Text } from \"grommet\";\nimport { Mail } from \"grommet-icons\";\n\n\n// Multi purpose form component for login regiser and demo login\nexport const LoginForm = ({\n  email,\n  setEmail,\n  password,\n  setPassword,\n  error,\n  action,\n  demo,\n}) => {\n  const inputRef = useRef(null);\n  const timerId = useRef();\n  useEffect(() => {\n    let mounted = true;\n    if (demo && mounted) {\n      let i = 0;\n      let string = \"demo@demo.com123456\";\n      timerId.current = setInterval(() => {\n        if (i <= 13) {\n          setEmail(string.slice(0, i));\n        } else if (i < string.length && i > 13) {\n          setPassword(string.slice(13, i + 1));\n        } else {\n          inputRef.current.click();\n        }\n        i++;\n      }, 100);\n    }\n    return () => {\n      mounted = false;\n      clearInterval(timerId.current);\n    };\n  }, [demo, setEmail, setPassword]);\n\n  return (\n    <Form\n      align=\"start\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        action({\n          variables: {\n            email,\n            password,\n          },\n        });\n      }}\n    >\n      <FormField info=\"Email Address\">\n        <TextInput\n          icon={<Mail />}\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"example@example.com\"\n        />\n      </FormField>\n      <FormField info=\"Password\">\n        <TextInput\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n      </FormField>\n      <Box style={{ color: \"Red\" }} align=\"center\" height=\"20px\">\n        <Text\n          style={{ fontStyle: \"italic\", fontFamily: \"Fira Sans\" }}\n          size=\"large\"\n        >\n          {error}\n        </Text>\n      </Box>\n      <Box>\n        <Button\n          ref={inputRef}\n          size=\"large\"\n          alignSelf=\"end\"\n          type=\"submit\"\n          primary\n          label=\"Submit\"\n        />\n      </Box>\n    </Form>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport Queries from \"../graphql/queries\";\nimport Mutations from \"../graphql/mutations\";\nimport { Box, Text, Grid, Heading } from \"grommet\";\nimport { FormTrash } from \"grommet-icons\";\nconst { DELETE_API_KEY, SELECT_KEY } = Mutations;\nconst { FETCH_ACCOUNT, FETCH_USER } = Queries;\n\n// React Component built to show Eventbrite Account Information\n// Includes Acccount Card and an Account List\n\n// Card of Each Account Includes Account Email\nfunction AccountCard({ apikey, id, userId, selectedKey }) {\n  const [hover, sethover] = useState(false);\n\n  // Mutation To delete eventbrite account from database from api key\n  const [deleteAPI] = useMutation(DELETE_API_KEY, {\n    onError: (err) => {\n      const message = err.message.split(\":\")[1];\n      console.log(message);\n    },\n    update(cache, { data: { deleteAPIkey } }) {\n      let data = cache.readQuery({\n        query: FETCH_USER,\n        variables: { userId },\n      });\n      cache.writeQuery({\n        query: FETCH_USER,\n        variables: { userId },\n        data: {\n          user: {\n            ...data.user,\n            apikeys: deleteAPIkey.apikeys,\n          },\n        },\n      });\n    },\n  });\n  const [selectKey] = useMutation(SELECT_KEY, {\n    onError: (err) => {\n      console.log(err.message);\n    },\n    update(cache, { data: { selectKey } }) {\n      let data = cache.readQuery({\n        query: FETCH_USER,\n        variables: { userId },\n      });\n      cache.writeQuery({\n        query: FETCH_USER,\n        variables: { userId },\n        data: {\n          user: {\n            ...data.user,\n            selectedKey: selectKey.selectedKey,\n          },\n        },\n      });\n    },\n  });\n  const { loading, data, error } = useQuery(FETCH_ACCOUNT, {\n    variables: {\n      apikey,\n    },\n  });\n  if (error)\n    return (\n      <h3 style={{ color: \"red\", fontWeight: \"bolder\" }}>\n        {error.message.split(\":\")[1]}\n      </h3>\n    );\n  if (loading) return null;\n  let { account } = data;\n\n  return (\n    <Box\n      focusIndicator={false}\n      key={id}\n      direction=\"row\"\n      justify=\"center\"\n      align=\"center\"\n      border={\n        apikey === selectedKey\n          ? {\n              color: \"brand\",\n              size: \"small\",\n            }\n          : {\n              size: \"small\",\n            }\n      }\n      background={{ light: \"light-2\", dark: \"dark-1\" }}\n      as=\"button\"\n      type=\"button\"\n      style={{ cursor: \"pointer\" }}\n      onClick={() => {\n        selectKey({\n          variables: {\n            userId: userId,\n            key: apikey,\n          },\n        });\n      }}\n    >\n      <Box pad=\"xsmall\">\n        <Heading level=\"5\" truncate>\n          {account.email}\n        </Heading>\n      </Box>\n      <FormTrash\n        onMouseEnter={() => sethover(true)}\n        onMouseLeave={() => sethover(false)}\n        onClick={(e) => {\n          e.preventDefault();\n          deleteAPI({\n            variables: {\n              id: userId,\n              apikey,\n            },\n          });\n        }}\n        color={hover ? \"status-error\" : \"status-disabled\"}\n      />\n    </Box>\n  );\n}\n// Grid that has list of accounts\nfunction AccountList({ user, selectedKey }) {\n  if (user.apikeys.length > 0) {\n    return (\n      <Grid\n        columns={{\n          count: user.apikeys.length < 4 ? user.apikeys.length : 4,\n          size: \"xsmall\",\n        }}\n        margin=\"small\"\n        gap=\"small\"\n      >\n        {user.apikeys.map((apikey, id) => (\n          <AccountCard\n            key={id}\n            apikey={apikey}\n            userId={user.id}\n            id={id}\n            selectedKey={selectedKey}\n          />\n        ))}\n      </Grid>\n    );\n  } else {\n    return (\n      <Box width=\"100vw\">\n        <Box margin=\"medium\">\n          <Text pad=\"small\">\n            Please add the secret keys from the accounts you want to post with.\n          </Text>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default AccountList;\n","import React, { useRef, useState, useEffect, createContext } from \"react\";\nimport { FormClose } from \"grommet-icons\";\nimport { Box, Button, CheckBox, Select, Text } from \"grommet\";\nimport { FormFieldLabel } from \"./FormFieldLabel\";\nimport test from \"./locations.json\";\nconst SearchInputContext = createContext({});\n\nconst sortLocations = (selectedLocationName) => {\n  return (p1, p2) => {\n    const p1Exists = selectedLocationName.includes(p1.id);\n    const p2Exists = selectedLocationName.includes(p2.id);\n\n    if (!p1Exists && p2Exists) {\n      return 1;\n    }\n    if (p1Exists && !p2Exists) {\n      return -1;\n    }\n    if (p1.City.toLowerCase() < p2.City.toLowerCase()) {\n      return -1;\n    }\n    return 1;\n  };\n};\n\nconst SearchDropdown = ({ venues, setFieldValue, values, ...props }) => {\n  const [locations, setLocations] = useState(test.sort(sortLocations(\"\")));\n  const [searching, setSearching] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const selectRef = useRef();\n  const clearLocations = () => {\n    setFieldValue(\"locations\", []);\n  };\n\n  let timerId = useRef();\n\n  useEffect(() => {\n    let mounted = true;\n    if (mounted) {\n      const filterLocations = test.filter(\n        (s) => s.City.toLowerCase().indexOf(searchQuery.toLowerCase()) >= 0\n      );\n\n      timerId.current = setTimeout(() => {\n        setSearching(false);\n        setLocations(filterLocations);\n      }, 500);\n    }\n    return () => {\n      clearTimeout(timerId.current);\n      mounted = false;\n    };\n  }, [searching, searchQuery]);\n\n  const renderOption = ({ City }) => (\n    <Box direction=\"row\" align=\"center\" pad=\"small\" flex={false}>\n      <CheckBox\n        tabIndex=\"-1\"\n        checked={values.locations.some((partner) => partner.City === City)}\n        label={<Text size=\"small\">{City}</Text>}\n        onChange={() => {}}\n      />\n    </Box>\n  );\n\n  const renderLocations = () => (\n    <Box\n      direction=\"row\"\n      gap=\"xsmall\"\n      pad={{ left: \"small\", vertical: \"small\" }}\n      align=\"center\"\n      flex\n    >\n      <Box\n        background=\"brand\"\n        round=\"medium\"\n        align=\"center\"\n        justify=\"center\"\n        pad={{ horizontal: \"xsmall\" }}\n        style={{ minWidth: \"21px\" }}\n      >\n        <Text size=\"small\">{values.locations.length}</Text>\n      </Box>\n      <Box flex>\n        <Text size=\"small\" truncate>\n          {values.locations.map(({ City }) => City).join(\", \")}\n        </Text>\n      </Box>\n      <Button\n        href=\"#\"\n        onFocus={(event) => event.stopPropagation()}\n        onClick={(event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          clearLocations();\n          selectRef.current.focus();\n        }}\n      >\n        <Box background=\"accent-4\" round=\"full\">\n          <FormClose style={{ width: \"12px\", height: \"12px\" }} />\n        </Box>\n      </Button>\n    </Box>\n  );\n  const handleChange = (option) => {\n    const newSelectedLocation = [...values.locations];\n    const seasonIndex = newSelectedLocation\n      .map(({ City }) => City)\n      .indexOf(option.City);\n    if (seasonIndex >= 0) {\n      newSelectedLocation.splice(seasonIndex, 1);\n    } else {\n      newSelectedLocation.push(option);\n    }\n    const selectedLocation = newSelectedLocation.map(({ City }) => City);\n    const sortedLocation = [...test].sort(sortLocations(selectedLocation));\n    setFieldValue(\"locations\", newSelectedLocation);\n    setLocations(sortedLocation);\n  };\n  return (\n    <SearchInputContext.Provider>\n      <FormFieldLabel {...props}>\n        <Select\n          ref={selectRef}\n          closeOnChange={false}\n          placeholder=\"Select a location\"\n          searchPlaceholder=\"Search for Location\"\n          emptySearchMessage=\"No locations found, please add some locations\"\n          multiple\n          replace={false}\n          valueKey=\"City\"\n          labelKey=\"City\"\n          value={values.locations.length ? renderLocations() : []}\n          options={locations}\n          onChange={({ option }) => handleChange(option)}\n          onSearch={(query) => {\n            setSearching(true);\n            setSearchQuery(query);\n          }}\n        >\n          {renderOption}\n        </Select>\n      </FormFieldLabel>\n    </SearchInputContext.Provider>\n  );\n};\n\nexport default SearchDropdown;\n","import React from \"react\";\nimport { Box } from \"grommet\";\n// Spinner component to show when items are loading\nconst spinning = (\n  <svg\n    version=\"1.1\"\n    viewBox=\"0 0 32 32\"\n    width=\"68px\"\n    height=\"68px\"\n    fill=\"#f05537\"\n  >\n    <path\n      opacity=\".25\"\n      d=\"M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4\"\n    />\n    <path d=\"M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z\">\n      <animateTransform\n        attributeName=\"transform\"\n        type=\"rotate\"\n        from=\"0 16 16\"\n        to=\"360 16 16\"\n        dur=\"0.8s\"\n        repeatCount=\"indefinite\"\n      />\n    </path>\n  </svg>\n);\n\nexport const Spinner = () => (\n  <Box align=\"center\" justify=\"center\">\n    {spinning}\n  </Box>\n);\n\nexport default Spinner;\n"],"sourceRoot":""}