{"version":3,"sources":["serviceWorker.js","header/Header.js","App.js","index.js","graphql/queries.js","graphql/mutations.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","HeaderPanel","isLoggedIn","responsive","pending","setPending","eventClient","useApolloClient","logout","e","preventDefault","localStorage","removeItem","writeData","data","userId","Header","Menu","alignSelf","dropProps","align","top","left","icon","pad","items","label","CheckBox","background","light","dark","checked","onClick","Box","direction","Heading","level","color","style","userSelect","fontFamily","gap","margin","Button","textDecoration","weight","plain","Login","React","lazy","EventTool","IS_LOGGED_IN","Queries","theme","deepMerge","grommet","defaultMode","global","font","family","colors","brand","inactive","focus","App","props","useState","darkMode","setDarkMode","matchMedia","useQuery","loading","message","Grommet","themeMode","ResponsiveContext","Consumer","height","max","transition","overflow","tag","justify","fallback","VERIFY_USER","Mutations","cache","InMemoryCache","dataIdFromObject","object","_id","errorLink","onError","graphQLErrors","map","httpLink","createHttpLink","uri","authorization","getItem","init","a","persistCache","storage","maxSize","client","ApolloClient","link","ApolloLink","from","networkError","resolvers","token","mutate","mutation","variables","verifyUser","loggedIn","id","Root","WebFont","load","google","families","ReactDOM","render","document","getElementById","gql","FETCH_USER_ID","FETCH_USER","FETCH_ACCOUNTS","FETCH_ACCOUNT","FETCH_VENUES","FETCH_CATEGORIES_AND_SUBCATEGORIES_AND_TYPES","LOGIN_USER","REGISTER_USER","PUSH_API_KEY","DELETE_API_KEY","SUBMIT_FORM"],"mappings":"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","file":"static/js/main.c4725f5b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { Box, Heading, Header, CheckBox, Button, Menu } from \"grommet\";\nimport { Menu as MenuIcon } from \"grommet-icons\";\n\nconst HeaderPanel = ({ isLoggedIn, responsive, pending, setPending }) => {\n  const eventClient = useApolloClient();\n  const logout = (e) => {\n    e.preventDefault();\n    localStorage.removeItem(\"auth-token\");\n    localStorage.removeItem(\"userId\");\n    eventClient.writeData({\n      data: {\n        isLoggedIn: false,\n        userId: null,\n      },\n    });\n  };\n\n  return responsive === \"small\" ? (\n    <Header>\n      <Menu\n        alignSelf=\"center\"\n        dropProps={{ align: { top: \"bottom\", left: \"left\" } }}\n        icon={<MenuIcon />}\n        pad=\"small\"\n        items={\n          isLoggedIn\n            ? [\n                {\n                  label: (\n                    <CheckBox\n                      background={{\n                        light: \"light-2\",\n                        dark: \"dark-2\",\n                      }}\n                      checked={pending}\n                      label=\"Scheduled Events\"\n                    />\n                  ),\n                  onClick: () => setPending(!pending),\n                },\n                {\n                  label: \"Logout\",\n                  onClick: (e) => logout(e),\n                },\n              ]\n            : []\n        }\n      />\n    </Header>\n  ) : (\n    <Header>\n      {isLoggedIn ? (\n        <>\n          <Box pad=\"medium\" direction=\"row\" align=\"center\">\n            <Heading\n              level=\"1\"\n              color=\"brand\"\n              style={{ userSelect: \"none\", fontFamily: \"Playball\" }}\n            >\n              Event Tool\n            </Heading>\n          </Box>\n          <Box direction=\"row\" gap=\"small\">\n            <Box gap=\"small\" margin=\"medium\" direction=\"row\">\n              <Button\n                onClick={() => {\n                  setPending(!pending);\n                }}\n                style={{\n                  fontFamily: \"Fira Sans\",\n                  textDecoration: pending ? \"underline\" : \"none\",\n                }}\n              >\n                Created Events\n              </Button>\n            </Box>\n            <Box gap=\"small\" margin=\"medium\" direction=\"row\">\n              <Button\n                style={{\n                  fontFamily: \"Fira Sans\",\n                }}\n                weight=\"bold\"\n                plain\n                label=\"Logout\"\n                onClick={logout}\n              />\n            </Box>\n          </Box>\n        </>\n      ) : null}\n    </Header>\n  );\n};\n\nexport default HeaderPanel;\n","import React, { useState, Suspense } from \"react\";\nimport HeaderPanel from \"./header/Header\";\nimport { grommet, Grommet, Box, ResponsiveContext } from \"grommet\";\nimport { deepMerge } from \"grommet/utils\";\nimport { useQuery } from \"react-apollo\";\nimport Queries from \"./graphql/queries\";\nconst Login = React.lazy(() => import(\"./Login\"));\nconst EventTool = React.lazy(() => import(\"./eventtool/EventTool\"));\nconst { IS_LOGGED_IN } = Queries;\n\nconst theme = deepMerge(grommet, {\n  defaultMode: \"dark\",\n  global: {\n    font: {\n      family: \"Noto Sans\",\n    },\n    colors: {\n      brand: \"#f05537\",\n      \"accent-1\": \"#73a580\",\n      \"accent-2\": \"#F48668\",\n      \"accent-3\": \"#c5c392\",\n      \"neutral-1\": \"#EEA960\",\n      \"neutral-2\": \"#3659e3\",\n      \"neutral-3\": \"#47AE6A\",\n      inactive: \"#6f7287\",\n      focus: \"none\",\n    },\n  },\n});\n\nfunction App(props) {\n  const [pending, setPending] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  window\n    .matchMedia(\"(prefers-color-scheme: dark)\")\n    .addEventListener(\"change\", (e) => {\n      setDarkMode(true);\n    });\n  let { data, error, loading } = useQuery(IS_LOGGED_IN);\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n  if (loading) {\n    return <p>Loading</p>;\n  }\n  let { isLoggedIn } = data;\n\n  return (\n    <Grommet theme={theme} themeMode={darkMode ? \"dark\" : \"light\"}>\n      <ResponsiveContext.Consumer>\n        {(responsive) => {\n          return (\n            <Box\n              height={{ max: \"100vh\" }}\n              style={{ transition: \"0.25s ease-out\" }}\n              background={{ light: \"light-3\", dark: \"dark-1\" }}\n              overflow=\"auto\"\n            >\n              <HeaderPanel\n                responsive={responsive}\n                pending={pending}\n                setPending={setPending}\n                isLoggedIn={isLoggedIn}\n              />\n              <Box\n                tag=\"main\"\n                direction=\"column\"\n                align=\"center\"\n                justify=\"start\"\n                {...props}\n              >\n                {!isLoggedIn ? (\n                  <Suspense\n                    fallback={\n                      <Box\n                        height=\"100vh\"\n                        background={{ light: \"light-3\", dark: \"dark-1\" }}\n                      >\n                        Loading...\n                      </Box>\n                    }\n                  >\n                    <Login responsive={responsive} />\n                  </Suspense>\n                ) : (\n                  <Suspense\n                    fallback={\n                      <Box\n                        height=\"100vh\"\n                        background={{ light: \"light-3\", dark: \"dark-1\" }}\n                      >\n                        Loading...\n                      </Box>\n                    }\n                  >\n                    <EventTool pending={pending} responsive={responsive} />\n                  </Suspense>\n                )}\n              </Box>\n            </Box>\n          );\n        }}\n      </ResponsiveContext.Consumer>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport WebFont from \"webfontloader\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { persistCache } from \"apollo-cache-persist\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\n\nimport Mutations from \"./graphql/mutations\";\nconst { VERIFY_USER } = Mutations;\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: (object) => object._id || null,\n});\n\nconst errorLink = onError(({ graphQLErrors }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message }) => console.log(message));\n  }\n});\nlet devhost = window.location.hostname;\nconst gqlUri =\n  process.env.NODE_ENV === \"production\"\n    ? \"/graphql\"\n    : `http://${devhost}:5000/graphql`;\n\nconst httpLink = createHttpLink({\n  uri: gqlUri,\n  headers: {\n    authorization: localStorage.getItem(\"auth-token\"),\n  },\n});\nconst init = async () => {\n  await persistCache({\n    cache,\n    storage: window.localStorage,\n    maxSize: \"4mb\",\n  });\n  const client = new ApolloClient({\n    link: ApolloLink.from([errorLink, httpLink]),\n    cache,\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log(\"graphQLErrors\", graphQLErrors);\n      console.log(\"networkError\", networkError);\n    },\n    resolvers: {},\n  });\n  const token = localStorage.getItem(\"auth-token\");\n  const userId = localStorage.getItem(\"userId\");\n  cache.writeData({\n    data: {\n      isLoggedIn: Boolean(token),\n      userId: userId,\n    },\n  });\n\n  if (token) {\n    client\n      .mutate({ mutation: VERIFY_USER, variables: { token } })\n      .then(({ data }) => {\n        cache.writeData({\n          data: {\n            isLoggedIn: data.verifyUser.loggedIn,\n            userId: data.verifyUser.id,\n          },\n        });\n      });\n  }\n  const Root = () => (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n  WebFont.load({\n    google: {\n      families: [\"Playball\", \"Fira Sans\", \"Noto Sans\"],\n    },\n  });\n  ReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.register();\n};\n\ndocument.addEventListener(\"DOMContentLoaded\", (e) => {\n  init();\n});\n","import gql from \"graphql-tag\";\n\nexport default {\n  IS_LOGGED_IN: gql`\n    query IsUserLoggedIn {\n      isLoggedIn @client\n    }\n  `,\n  FETCH_USER_ID: gql`\n    query fetchUserId {\n      userId @client\n    }\n  `,\n  FETCH_USER: gql`\n    query fetchUser($userId: ID!) {\n      user(id: $userId) {\n        id\n        email\n        apikeys\n        jobs {\n          data\n          status\n          schedule\n          urls\n        }\n      }\n    }\n  `,\n  FETCH_ACCOUNTS: gql`\n    query fetchAccounts($apikeys: [String!]) {\n      accounts(apikeys: $apikeys) {\n        id\n        first_name\n        last_name\n        apikey\n        name\n        email\n        is_public\n        image_id\n        organizations {\n          id\n          name\n        }\n      }\n    }\n  `,\n  FETCH_ACCOUNT: gql`\n    query fetchAccount($apikey: String!) {\n      account(apikey: $apikey) {\n        id\n        first_name\n        last_name\n        apikey\n        name\n        email\n        is_public\n        image_id\n        organizations {\n          id\n          name\n        }\n      }\n    }\n  `,\n  FETCH_VENUES: gql`\n    query fetchVenues($apikey: String!, $orgId: String) {\n      venues(apikey: $apikey, orgId: $orgId) {\n        name\n        id\n      }\n    }\n  `,\n  FETCH_CATEGORIES_AND_SUBCATEGORIES_AND_TYPES: gql`\n    query fetchCategories($apikey: String!) {\n      categories(apikey: $apikey) {\n        name\n        id\n      }\n      subcategories(apikey: $apikey) {\n        name\n        id\n        parent\n      }\n      types(apikey: $apikey) {\n        name\n        id\n      }\n      account(apikey: $apikey) {\n        name\n        organizations {\n          id\n          name\n        }\n      }\n    }\n  `,\n};\n","import gql from \"graphql-tag\";\nexport default {\n  LOGIN_USER: gql`\n    mutation LoginUser($email: String!, $password: String!) {\n      login(email: $email, password: $password) {\n        id\n        token\n        loggedIn\n      }\n    }\n  `,\n  REGISTER_USER: gql`\n    mutation RegisterUser($email: String!, $password: String!) {\n      register(email: $email, password: $password) {\n        id\n        token\n        loggedIn\n      }\n    }\n  `,\n  VERIFY_USER: gql`\n    mutation VerifyUser($token: String!) {\n      verifyUser(token: $token) {\n        id\n        loggedIn\n      }\n    }\n  `,\n  PUSH_API_KEY: gql`\n    mutation pushAPIkey($id: ID!, $apikey: String!) {\n      pushAPIkey(id: $id, apikey: $apikey) {\n        id\n        email\n        apikeys\n        jobs {\n          data\n          status\n          schedule\n        }\n      }\n    }\n  `,\n  DELETE_API_KEY: gql`\n    mutation deleteAPIkey($id: ID!, $apikey: String!) {\n      deleteAPIkey(id: $id, apikey: $apikey) {\n        id\n        email\n        apikeys\n        jobs {\n          data\n          status\n          schedule\n        }\n      }\n    }\n  `,\n  SUBMIT_FORM: gql`\n    mutation submitForm(\n      $id: ID!\n      $date: String!\n      $data: String!\n      $key: String!\n    ) {\n      scheduleEvent(id: $id, date: $date, data: $data, key: $key) {\n        id\n        email\n        apikeys\n        jobs {\n          data\n          status\n          schedule\n          urls\n        }\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}